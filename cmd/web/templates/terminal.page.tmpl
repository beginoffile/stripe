{{template "base" .}}

{{define "title"}}
    Virtual Terminal    
{{end}}


{{define "content"}}
    <h2 class="mt-3 text-center">virtual Terminal</h2>
    <hr>
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>
    <form action="/payment-succeeded" method="post"
        name="charge_form" id="charge_form"
        class="d-block needs-validation charge-form"
        autocomplete="off" novalidate="">
        <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <input type="text" class="form-control" id="amount" name="amount"
            required="" autocomplete="amount-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Cardholder Name</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
            required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Cardholder Email</label>
            <input type="text" class="form-control" id="cardholder-email" name="email"
            required="" autocomplete="cardholder-email-new">
        </div>

        <!-- card number will be built by stripe -->
        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div id="card-element" class="form-control"></div>
            <div class="d-none alert alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="d-none alert alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr>
        <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">Charge Card</a>
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent">
        <input type="hidden" name="payment_method" id="payment_method">
        <input type="hidden" name="payment_amount" id="payment_amount">
        <input type="hidden" name="payment_currency" id="payment_currency">
        
    </form>
    
    
{{end}}


{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
        let card;
        let stripe;
        const cardMessages= document.getElementById("card-messages");
        const payButton = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");
        
        console.log(processing);

        stripe= Stripe('pk_test_51Ncv6hBYhbsWghvUJpK8J1wHdrB83whF3RJS1HvaJAJwdQgLs9sajjIHNijvPqdqQu6iBJgTEIShdhUkIY4tCYva00b2exa6pi')

        function hidePayButtons(){
            payButton.classList.add("d-none");
            processing.classList.remove("d-none");
        }


        function showPayButtons(){
            payButton.classList.remove("d-none");
            processing.classList.add("d-none");
        }

        function showCardError(msg){
            cardMessages.classList.add("alert-danger");
            cardMessages.classList.remove("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = msg;
        }

        function showCardSuccess(msg){
            cardMessages.classList.remove("alert-danger");
            cardMessages.classList.add("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = "Transaction Successful";
        }
        
        async function val() {
            this.event.preventDefault();
            this.event.stopPropagation();

            let form = document.getElementById("charge_form");
            if (!form.checkValidity()){            
                form.classList.add("was-validated");
                return;
            }
            form.classList.add("was-validated");
            hidePayButtons();

            let amountToCharge = String(parseFloat(document.getElementById("amount").value)*100);

            let payload = {
                amount: amountToCharge,
                currency: 'cad',
            }

            const requestOptions = {
                method: 'post',
                headers:{
                    'Accept':'application/json',
                    'Content-Type':'application/json',                    
                },
                body:JSON.stringify(payload),

            }

            try{
                let response = await fetch("http://localhost:4001/api/payment-intent",requestOptions);            
                let data = await response.text();
                console.log(data)
                let objData = await JSON.parse(data);

                
                console.log(objData)

                let result = await stripe.confirmCardPayment(objData.client_secret,{
                    payment_method:{
                        card:card,
                        billing_details:{
                            name:document.getElementById("cardholder-name").value,                        
                        }
                    }
                    
                })


                console.log(result)

                if (result.error){
                    //card declined
                    showCardError(result.error.message);
                    showPayButtons();
                }else if(result.paymentIntent){
                    if (result.paymentIntent.status ==="succeeded"){
                        //we have charged the card
                        document.getElementById("payment_method").value = result.paymentIntent.payment_method_types[0];
                        document.getElementById("payment_intent").value = result.paymentIntent.id;
                        document.getElementById("payment_amount").value = result.paymentIntent.amount;
                        document.getElementById("payment_currency").value = result.paymentIntent.currency;
                        processing.classList.add("d-none");
                        showCardSuccess();
                        //would submit the form
                        document.getElementById("charge_form").submit();
                    }
                }
            }
            catch(e){
                console.log(e);
                showCardError("Invalid response from payment gateway");
                showPayButtons();
            }
            
          
            
        }

        (()=>{
            // create stripe & elements
            const elements = stripe.elements();
            const style = {
                base: {
                    fontSize:'16px',
                    lineHeight: '24px',
                }
            };

            // create card entry
            card = elements.create('card',{
                style:style,
                hidePostalCode:true,

            });
            card.mount("#card-element");

            //check input errors
            card.addEventListener('change', cambio);

            function cambio(e){
                let displayError= document.getElementById("card-errors");
                if (e.error){
                    displayError.classList.remove('d-none');
                    // displayError.classList.add('alert');
                    displayError.textContent = e.error.message;
                }else{
                    displayError.classList.add('d-none');
                    // displayError.classList.remove('alert');
                    displayError.textContent = '';
                } 
            };
        }
        )();

    </script>
{{end}}